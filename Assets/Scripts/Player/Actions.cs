//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Lazaro"",
            ""id"": ""c91aa732-1bb0-4d07-a94d-cf98e74f8bf4"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3afbeab9-461f-497d-a9e2-32b7796423fe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationX"",
                    ""type"": ""Value"",
                    ""id"": ""0657e494-ceed-40d0-8775-849c88008920"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotationY"",
                    ""type"": ""Value"",
                    ""id"": ""12527f2e-bb6c-46bb-b0b4-84159bb5a032"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dance 1"",
                    ""type"": ""Button"",
                    ""id"": ""121f097b-fc34-43f9-be86-6e388f830505"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dance 2"",
                    ""type"": ""Button"",
                    ""id"": ""436aab14-9806-4284-9a6b-746e8ad29fe4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dance 3"",
                    ""type"": ""Button"",
                    ""id"": ""6b2aa94d-ea86-4be1-9ab2-c0c4d73edfcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""040c6a9f-b5e5-4c76-a7ef-fcfeb2df9868"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""4ee4908d-6055-4392-b343-7ce8e2e5702a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""0bef44ad-1747-4ea3-93d4-327536730baf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""5825d9c7-cce4-45c1-94ab-b92a5c69b585"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""305e2460-02ea-48d1-9145-8cab0ac3b711"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ca34c2ed-185f-4cc3-ba37-6db18fc103e6"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""587ab7fc-ac5b-47f5-bca4-2b8c281d63dc"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7ba2958-cace-48ec-9184-91e99a3667c8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dance 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f3a96f-1a6c-4205-bf24-91f177b79d65"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dance 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec9aeb50-319e-48cc-81bc-ff0a00e82737"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dance 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RadialMenu"",
            ""id"": ""4976b81e-f816-4f2c-956f-c1c4d7592b03"",
            ""actions"": [
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Value"",
                    ""id"": ""5934e9a4-0aea-47ed-b7d6-0e7d3b2228c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleMenu"",
                    ""type"": ""Button"",
                    ""id"": ""e3617e5f-5af5-4def-9b49-0048e78b8ccc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aaa84e87-e280-4cec-830f-cc5147c89172"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""286d3191-5ddb-40e7-887e-73000ee59e80"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Lazaro
        m_Lazaro = asset.FindActionMap("Lazaro", throwIfNotFound: true);
        m_Lazaro_Movement = m_Lazaro.FindAction("Movement", throwIfNotFound: true);
        m_Lazaro_RotationX = m_Lazaro.FindAction("RotationX", throwIfNotFound: true);
        m_Lazaro_RotationY = m_Lazaro.FindAction("RotationY", throwIfNotFound: true);
        m_Lazaro_Dance1 = m_Lazaro.FindAction("Dance 1", throwIfNotFound: true);
        m_Lazaro_Dance2 = m_Lazaro.FindAction("Dance 2", throwIfNotFound: true);
        m_Lazaro_Dance3 = m_Lazaro.FindAction("Dance 3", throwIfNotFound: true);
        // RadialMenu
        m_RadialMenu = asset.FindActionMap("RadialMenu", throwIfNotFound: true);
        m_RadialMenu_MouseMovement = m_RadialMenu.FindAction("MouseMovement", throwIfNotFound: true);
        m_RadialMenu_ToggleMenu = m_RadialMenu.FindAction("ToggleMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Lazaro
    private readonly InputActionMap m_Lazaro;
    private List<ILazaroActions> m_LazaroActionsCallbackInterfaces = new List<ILazaroActions>();
    private readonly InputAction m_Lazaro_Movement;
    private readonly InputAction m_Lazaro_RotationX;
    private readonly InputAction m_Lazaro_RotationY;
    private readonly InputAction m_Lazaro_Dance1;
    private readonly InputAction m_Lazaro_Dance2;
    private readonly InputAction m_Lazaro_Dance3;
    public struct LazaroActions
    {
        private @Actions m_Wrapper;
        public LazaroActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Lazaro_Movement;
        public InputAction @RotationX => m_Wrapper.m_Lazaro_RotationX;
        public InputAction @RotationY => m_Wrapper.m_Lazaro_RotationY;
        public InputAction @Dance1 => m_Wrapper.m_Lazaro_Dance1;
        public InputAction @Dance2 => m_Wrapper.m_Lazaro_Dance2;
        public InputAction @Dance3 => m_Wrapper.m_Lazaro_Dance3;
        public InputActionMap Get() { return m_Wrapper.m_Lazaro; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LazaroActions set) { return set.Get(); }
        public void AddCallbacks(ILazaroActions instance)
        {
            if (instance == null || m_Wrapper.m_LazaroActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LazaroActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @RotationX.started += instance.OnRotationX;
            @RotationX.performed += instance.OnRotationX;
            @RotationX.canceled += instance.OnRotationX;
            @RotationY.started += instance.OnRotationY;
            @RotationY.performed += instance.OnRotationY;
            @RotationY.canceled += instance.OnRotationY;
            @Dance1.started += instance.OnDance1;
            @Dance1.performed += instance.OnDance1;
            @Dance1.canceled += instance.OnDance1;
            @Dance2.started += instance.OnDance2;
            @Dance2.performed += instance.OnDance2;
            @Dance2.canceled += instance.OnDance2;
            @Dance3.started += instance.OnDance3;
            @Dance3.performed += instance.OnDance3;
            @Dance3.canceled += instance.OnDance3;
        }

        private void UnregisterCallbacks(ILazaroActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @RotationX.started -= instance.OnRotationX;
            @RotationX.performed -= instance.OnRotationX;
            @RotationX.canceled -= instance.OnRotationX;
            @RotationY.started -= instance.OnRotationY;
            @RotationY.performed -= instance.OnRotationY;
            @RotationY.canceled -= instance.OnRotationY;
            @Dance1.started -= instance.OnDance1;
            @Dance1.performed -= instance.OnDance1;
            @Dance1.canceled -= instance.OnDance1;
            @Dance2.started -= instance.OnDance2;
            @Dance2.performed -= instance.OnDance2;
            @Dance2.canceled -= instance.OnDance2;
            @Dance3.started -= instance.OnDance3;
            @Dance3.performed -= instance.OnDance3;
            @Dance3.canceled -= instance.OnDance3;
        }

        public void RemoveCallbacks(ILazaroActions instance)
        {
            if (m_Wrapper.m_LazaroActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILazaroActions instance)
        {
            foreach (var item in m_Wrapper.m_LazaroActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LazaroActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LazaroActions @Lazaro => new LazaroActions(this);

    // RadialMenu
    private readonly InputActionMap m_RadialMenu;
    private List<IRadialMenuActions> m_RadialMenuActionsCallbackInterfaces = new List<IRadialMenuActions>();
    private readonly InputAction m_RadialMenu_MouseMovement;
    private readonly InputAction m_RadialMenu_ToggleMenu;
    public struct RadialMenuActions
    {
        private @Actions m_Wrapper;
        public RadialMenuActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMovement => m_Wrapper.m_RadialMenu_MouseMovement;
        public InputAction @ToggleMenu => m_Wrapper.m_RadialMenu_ToggleMenu;
        public InputActionMap Get() { return m_Wrapper.m_RadialMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RadialMenuActions set) { return set.Get(); }
        public void AddCallbacks(IRadialMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_RadialMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RadialMenuActionsCallbackInterfaces.Add(instance);
            @MouseMovement.started += instance.OnMouseMovement;
            @MouseMovement.performed += instance.OnMouseMovement;
            @MouseMovement.canceled += instance.OnMouseMovement;
            @ToggleMenu.started += instance.OnToggleMenu;
            @ToggleMenu.performed += instance.OnToggleMenu;
            @ToggleMenu.canceled += instance.OnToggleMenu;
        }

        private void UnregisterCallbacks(IRadialMenuActions instance)
        {
            @MouseMovement.started -= instance.OnMouseMovement;
            @MouseMovement.performed -= instance.OnMouseMovement;
            @MouseMovement.canceled -= instance.OnMouseMovement;
            @ToggleMenu.started -= instance.OnToggleMenu;
            @ToggleMenu.performed -= instance.OnToggleMenu;
            @ToggleMenu.canceled -= instance.OnToggleMenu;
        }

        public void RemoveCallbacks(IRadialMenuActions instance)
        {
            if (m_Wrapper.m_RadialMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRadialMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_RadialMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RadialMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RadialMenuActions @RadialMenu => new RadialMenuActions(this);
    public interface ILazaroActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotationX(InputAction.CallbackContext context);
        void OnRotationY(InputAction.CallbackContext context);
        void OnDance1(InputAction.CallbackContext context);
        void OnDance2(InputAction.CallbackContext context);
        void OnDance3(InputAction.CallbackContext context);
    }
    public interface IRadialMenuActions
    {
        void OnMouseMovement(InputAction.CallbackContext context);
        void OnToggleMenu(InputAction.CallbackContext context);
    }
}
